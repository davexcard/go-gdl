Introducción a Go: Variables, tipos de datos y funciones

David Carrillo
Desarrollador de Software
davexcard@gmail.com
@davexcard

Sergio Jimenez
Desarrollador de Software
sjcmexr@gmail.com

* Variables
*  Variables
- Nombres
- Declaraciones
- Asignaciones
- Declaraciones de tipo
- Alcance

* Nombres
Los nombres en Go sigue un simple regla: un nombre comienza con una letra
 (cualquier cosa que Unicode considere una letra) o un guion bajo.
 
Palabras que no pueden ser usadas como nombres
.code code/variables/palabrasreservadas.go



: puede tener cualquier numbero adicional de letras digitos o guines bajos
: There is no limit on name length, but convention and stylein Go programs lean toward short names, especially forlocal variables with small scopes; you are 
: much more likely to see variables named ithan theLoopIndex. 

* Nombres
Estilisticamete en programas escritos en Go se usa CamelCase

QuoteRuneToASCII
parseRequestLine 


.image images/gopher-ok.PNG 140 _


quote_rune_to_ASCII
parse_request_line

.image images/gopher-no.PNG 140 _

* Declaraciones
Una declaracion nombra una entidad del programa y especifica alguna o todas sus propiedades. Hay cuatro clases de declaracion principales: var, const, type, func.

.code code/variables/boiling.go

* Variables

Una declaracion var crea una variable de un tipo en particular, liga un nombre a la variable y setea el valor inicial.
Cada declaracion tiene la forma general.
 
	var name type = expression
	
Go there is no such thing as an uninitialized variable

	var s string
	fmt.Println(s) // ""
	
Inicializacion de multiples variables

	var i, j, k int                 // int, int, int
	var b, f, s = true, 2.3, "four" // bool, float64, string
	
	
: Package-level variables are initialized before main begins (§2.6.2), and local variables are initialized as their declarations are encountered during function execution

* Variables
- Declaracion de variables corta

Dentro de una funcion, una forma alternativa llamada short variable declaration puede ser usada para declarar e inicializar variables locales.
tiene la forma

	name := expression
	
El tipo del nombre es determinado por la expresion

	anim := gif.GIF{LoopCount: nframes}
	freq := rand.Float64() * 3.0
	t := 0.0
	
Declaraciones var son usadas cuando necesitas un tipo en especifico.

	i := 100                  // an int
	var boiling float64 = 100 // a float64
	var names []string
	var err error
	var p Point
	
* Variables
- Punteros

Un valor puntero es la direccion de una variable. Un puntero es asi la locacion donde un valor es almacenado.
Con un puntero, podemos leer o actualizar el valor de una variable indirectamente, sin usar o siquiera saber el nombre de la variable, si es que tiene uno.

	x := 1
	p := &x         // p, of type *int, points to x
	fmt.Println(*p) // "1"
	*p = 2          // equivalent to x = 2
	fmt.Println(x)  // "2"

: Each component of a variable of aggregate type—a field of a struct or an element of an array—is also a variable and thus has an address too.
	
#* Variables
#Es perfectamente seguro para una variable retornar la direccion de una variable local.
	
#.play returnLocal.go

: Each time we take the address of a variable or copy a pointer, we create new aliases or ways to
: identify the same variable. For example, *p is an alias for v. Pointer aliasing is useful because it allows us to access a variable without using its name, but this is a double-edged sword: to find all the statements that access a variable, we have to know all its aliases. It’s not just pointers that create aliases; aliasing also occurs when we copy values of other reference types like slices, maps, and channels, and even structs, arrays, and interfaces that contain these types.
	
* Variables
- La funcion new

Otra manera de crearuna variable es usar la funcion new. La exprecion new(T) crea una variable sin nombre de tipoT, y retorna su direccion, 
la cual es un valor de tipo *T.

	p := new(int)   // p, of type *int, points to an unnamed int variable
	fmt.Println(*p) // "0"
	*p = 2          // sets the unnamed int to 2
	fmt.Println(*p) // "2"
Una variable declarada con new no es diferente de una variable local ordinaria cuya direccion es tomada excepto que no necesita inventarle un nombre.
.code code/variables/new_comparison.go

* Variables
- Lifetime of variables
Es el intervalo de tiempo durante el cual existe durante la ejecucion de un programa.

.play code/variables/lifetime.go

* Variables
Asignaciones
El valor albergado por una variable es cambiado por un asentencia de asignacion, la cual es su forma mas simple tiene una variable a la izquierda del signo '=' y un expresion a la derecha.

	x = 1                       // named variable
	*p = true                   // indirect variable
	person.name = "bob"         // struct field
	count[x] = count[x] * scale // array or slice or map element
	count[x] *= scale

Asignacion de tupla
Otra forma de asignacion, conocidad como asignacion de tupla permite varias variables ser asignadas a ala vez. Todas las expresiones del ladoderecho son evaluadas antes de que cualquiera de las variables sea actualizada.

	x, y = y, x   //swap values
: https://stackoverflow.com/questions/35707222/swap-two-numbers-golang
	i, j, k = 2, 3, 5     //assign multiple values
	
* Variables
Asignaciones
Ejemplo fibonacci

.play code/variables/fibonacci.go

* Declaraciones de Tipo (Type declarations)

El tipo de una variable o expresion define las caracteristicas del valor que podria tomar tales como el tamaño, como esta representado internamente, las operaciones in trinsecas que pueden desempeñarse y los mtodos asociados con el tipo.

		type name underlying-type
.code code/variables/temp_conversion.go

* Alcance (Scope)
.play code/variables/scope.go

* Tipos de datos básicos

* Tipos de datos en Go
  int8  int16  int32  int64
  uint uint8 uint16 uint32 uint64 uintptr

  float32 float64

  complex64 complex128

  byte  // alias de uint8

  rune  // alias de int32
        // representación de un código Unicode

  bool

  string

.image images/minero.jpeg 195 _

* Tipos Numéricos

- Tipos Enteros

  int8   : -128 to 127 
  int16  : -32768 to 32767 
  int32  : -2147483648 to 2147483647 
  int64  : -9223372036854775808 to 9223372036854775807
  uint8  : 0 to 255 
  uint16 : 0 to 65535 
  uint32 : 0 to 4294967295 
  uint64 : 0 to 18446744073709551615 

- Tipo de punto flotante

  float32 : ~7
  float64 : ~15

* Conversiones de tipos Numéricos

.play -edit -numbers code/numbers/number_types.go
.image images/gopherswrench.jpg 300 _

* Strings
.play -edit -numbers code/strings/strings.go

Soporte unicode
.play -edit -numbers code/emojis/emojis.go

* Constantes

.play -edit -numbers code/constants/constants.go

- Se declaran como variables pero con la palabra reservada const.
- Pueden ser un caracter, cadena de caracteres, booleano o valores numéricos.
- No pueden ser declaradas con la sintaxis :=

* Tipos compuestos

* Tipos Compuestos
- Arrays
- Slices
- Maps
- Structs

.image images/varios.jpg _ _

* Tipos compuestos
Arrays
 Una arrays es una secuencia de tamaño fijo de n cantidad de elementos.
 
: por su tamañao fijo casi no son usados en Go slices son mas versatiles
	var a [3]int             // array of 3 integers
	fmt.Println(a[0])        // print the first element
	fmt.Println(a[len(a)-1]) // print the last element, a[2]
Tamano determinado mediante elipsis	

	q := [...]int{1, 2, 3}
	fmt.Printf("%T\n", q) // "[3]int"
El tamano de un array es parte de su tipo  [3]int y [4]int son diferentes.
	
	q := [3]int{1, 2, 3}
	q = [4]int{1, 2, 3, 4} // compile error: cannot assign [4]int to [3]int
	
* Tipos compuestos
- Slices
Slices representan sequencias de tamaño variable cuyos elemetos todos son del mismo tipo Un tipo Slice es escrito [ ]Tdonde los elemetos tienes tipo T; luce como un array pero sin tamaño.

* Tipos compuestos
.image images/slice1.png

* Tipos Compuestos
-Slices
The slice operator s[i:j], where 0 ≤ i ≤ j ≤ cap(s), creates a new slice that refers to elements i through j-1 of the sequence s, which may be an array variable, a pointer to an array, or another slice.

	Q2 := months[4:7]
	summer := months[6:9]
	fmt.Println(Q2)     // ["April" "May" "June"]
	fmt.Println(summer) // ["June" "July" "August"]
	
Extend an slice

	fmt.Println(summer[:20]) // panic: out of range
	endlessSummer := summer[:5] // extend a slice (within capacity)
	fmt.Println(endlessSummer)  // "[June July August September October]"
	
* Tipos compuestos
The append function

.image images/append1.jpg

.image images/append2.jpg

* Tipos compuestos
- Maps
Los hashtable es una de la mas ingeniosa is versatiles estructuras de datos.  Es una collecion  no ordenada de pares key/value en los cuales la lleve es distinta y el valor asociado con la llave puede ser recuperado, actualiza o removido en tiempo constante.
En Go un map es una referencia a un hashtable y es escrito map[ K ]V, donde K y V son los tipos de llave valor.
La llave debe de ser comparable usando "=="
La funcion make puede ser creada para crear un map

	ages := make(map[string]int) // mapping from strings to ints

O usando un map literal

	ages := map[string]int {
    "alice":   31,
    "charlie": 34,}
	
* Tipos compuestos
Para accesar a elementos

	ages["alice"] = 32
	fmt.Println(ages["alice"]) // "32"
Para borrar elementos

	delete(ages, "alice") // remove element ages["alice"]

Son Operaciones seguras incluso sino estan presente

	ages["bob"] = ages["bob"] + 1 // happy birthday!
	
* Tipos compuestos
- Structs
Un struct es un tipo de datos agregado que agrupo zero o mas valores nombrados de tipos arbitrarios como una sola entidad. Cada valor es llamado campo

.code code/composite-types/struct1.go

* Tipos compuestos
- Structs
Structs literals

	type Point struct{ X, Y int }
	p := Point{1, 2}

* Funciones

* Sintaxis
.code code/methods/methods.go /^func main/,/^}/

Ejemplo simple:

.play -edit -numbers code/sum/sum.go

* Simplificado
.play -edit -numbers code/sum1/sum1.go

* No a la sobrecarga de funciones
.play -edit -numbers code/sum2/sum2.go
.image images/gopher-no.png 140 _

* Retorno de un valor
.play -edit -numbers code/sum3/sum3.go

* Retorno de multiples valores
.play -edit -numbers code/div-and-remainder/div-and-remainder.go

* Todas las llamada a funciones en Go son pasadas por valor
.play -edit -numbers code/double-fail/double-fail.go

* Funciones avanzadas

* Asignación de funciones a variables
.play -edit -numbers code/func-assign/func-assign.go